<div class="centering">
    <div class="gameBoard">
        @foreach (Point position in Game.GetBoardPositions())
        {
            <button class="boardSquare gameButton" style="grid-area: @(position.Y + 1) / @(position.X + 1); @State.GetTileCustomStyle(position)" onmouseover="@(() => OnHover(position))" onclick="@(() => OnClick(position))">@GetTilePieceText(position)</button>
        }
    </div>
</div>

@code {
    [AllowNull]
    private ChessGame Game;
    [AllowNull]
    private IChessUIState State;
    private bool NeedToRender = true;

    protected override bool ShouldRender()
    {
        bool render = NeedToRender;
        NeedToRender = false;
        return render;
    }

    protected override Task OnParametersSetAsync()
    {
        CreateNewGame();

        return base.OnParametersSetAsync();
    }

    private void CreateNewGame()
    {
        Game = new ChessGame();
        State = new MovePieceNothingHighlighted(Game);
        NeedToRender = true;
        StateHasChanged();
    }

    public void OnHover(Point position)
    {
        IChessUIState? nextState = State.OnHover(position);
        if (nextState == null)
        {
            return;
        }

        State = nextState;
        NeedToRender = true;
        StateHasChanged();
    }

    public void OnClick(Point position)
    {
        IChessUIState? nextState = State.OnClick(position);
        if (nextState == null)
        {
            return;
        }

        State = nextState;
        NeedToRender = true;
        StateHasChanged();
    }

    private string GetTilePieceText(Point position) => Game.GetTilePiece(position) switch
    {
        null => string.Empty,
        Pawn => "P",
        Rook => "R",
        Knight => "K",
        Bishop => "B",
        King => "K",
        Queen => "Q",
        _ => throw new ArgumentOutOfRangeException()
    };
}
