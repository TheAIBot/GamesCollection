<div class="centering">
    <div class="gameBoard">
        @for (int y = 0; y < 8; y++)
        {
            @for (int x = 0; x < 8; x++)
            {
                Point position = new Point(x, y);
                <button class="boardSquare gameButton" style="grid-area: @(position.Y + 1) / @(position.X + 1); @HighlightPiece(position)" onmouseover="@(() => OnHover(position))">@GetTilePieceText(position)</button>
            }
        }
    </div>
</div>

@code {
        [AllowNull]
        private ChessGame Game;
    private Player? WinningPlayer = null;
    private bool NeedToRender = true;
    private IReadOnlyCollection<Point> PositionsHighlighted = new List<Point>();

    protected override bool ShouldRender()
    {
        bool render = NeedToRender;
        NeedToRender = false;
        return render;
    }

    protected override Task OnParametersSetAsync()
    {
        CreateNewGame();

        return base.OnParametersSetAsync();
    }

    private void CreateNewGame()
    {
        Game = new ChessGame();
        //Game.OnGameOver += winner =>
        //{
        //    WinningPlayer = winner;
        //    NeedToRender = true;
        //    StateHasChanged();   
        //};
        WinningPlayer = null;
        NeedToRender = true;
        StateHasChanged();
    }

    public void OnHover(Point position)
    {
        IPiece? piece = Game.GetTilePiece(position);
        if (piece == null)
        {
            return;
        }

        PositionsHighlighted = piece.GetPositionPieceCanMoveTo(position, Game.Board);
        NeedToRender = true;
        StateHasChanged();
    }

    public string HighlightPiece(Point position)
    {
        if (!PositionsHighlighted.Contains(position))
        {
            return "";
        }

        return "background-image: linear-gradient(rgb(70, 39, 103), rgb(70, 39, 123));";
    }

    private string GetTilePieceText(Point position) => Game.GetTilePiece(position) switch
    {
        null => string.Empty,
        Pawn => "P",
        Rook => "R",
        Knight => "K",
        Bishop => "B",
        King => "K",
        Queen => "Q",
        _ => throw new ArgumentOutOfRangeException()
    };
}
